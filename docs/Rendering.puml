@startuml

interface IAsset {
}

class Application {
    + void Run()
    + void Shutdown()
    + Window& GetWindow()
    + {static} Application& Get()
    # void PushLayer(Layer*)
    # void PushOverlay(Layer*)
    # void PopLayer(Layer*)
    # void PopOverlay(Layer*)
    # EventManager* GetEventManager()
    - Renderer* m_Renderer
    - Scene* m_Scene
    - EventManager* m_EventManager
    - LayerStack* m_LayerStack
    - LayerContext* m_LayerContext
}

class LayerContext {
    + float* GetF(String&)
    + void SetF(String, float);
}

class Renderer {
    - Window m_Window
    - Camera* m_Camera
    + Renderer(Window&)
    + void Init()
    + void Shutdown()
    + void BeginFrame()
    + void Submit(Model*)
    + void EndFrame()
    + void SetClearColor(vec4&)
    + Camera GetCamera()
}

class Scene #Wheat {
    - vector<Model> m_Models
    + Update()
    + Render(Renderer*)
}

class LayerStack {
    + void PushLayer(Layer*)
    + void PushOverlay(Layer*)
    + void PopLayer(Layer*)
    + void PopOverlay(Layer*)
}

class Layer {
    + void OnAttach(LayerContext*)
    + void OnDetach(LayerContext*)
    + void OnUpdate(LayerContext*)
    + void OnRender(LayerContext*, Renderer*)
    + OnEvent(Event&, LayerContext*)
}

class Camera {
    - mat4 m_View
    - mat4 m_Projection
    + mat4 GetViewMatrix()
    + mat4 GetProjectionMatrix()
    + mat4 GetViewProjectionMatrix()
}

class Model {
    + Model()
    + Model(Mesh* mesh, Material* material)
    + void PushMesh(Mesh* mesh, Material* material)
    - Vector<SubMesh> m_SubMeshes
    - glm::mat4 m_ModelMatrix
}

struct SubMesh {
    + Mesh mesh
    + Material material
}

class Mesh {
    + void Draw()
}

class Material {
    + Material(Shader* shader);
    + void Bind()
    + void Bind(const glm::mat4& mvp)
    + void SetTexture(String& uniformName, Texture* texture);
    + void SetVector4(String& name, glm::vec4 value);
    - Shader* m_Shader
    - Map<String, Texture*> m_Textures;
    - Map<String, glm::vec4> m_Vec4Uniforms;
}

class Shader {
    + Shader(String vertexSource, String fragmentSource)
    + void Bind()
    + void Unbind()
    + void SetUniform1i(String name, int value)
    + void SetUniform1f(String name, float value)
    + void SetUniform4f(String name, float v0, float v1, float v2, float v3)
    + void SetUniformMat4f(String name, const glm::mat4 matrix)
}

class Texture {
    + void Bind(unsigned int slot = 0)
    + void Unbind()
}

Application --> LayerContext
Application --> LayerStack
Application --> Scene
Application --> Renderer
Scene ..> Renderer
Scene --o Model
LayerStack --o Layer
Renderer --> Camera

Material --> Shader
Material --o Texture
Model --o SubMesh
SubMesh --> Mesh
SubMesh --> Material

Material ..|> IAsset
Shader ..|> IAsset
Texture ..|> IAsset

@enduml